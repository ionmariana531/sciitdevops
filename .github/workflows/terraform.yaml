name: "Terraform CI/CD"

on:
  push:
    branches: 
      - add-terraform-github-actions-Mariana-fe 

jobs:
  provision-ec2:
    runs-on: ubuntu-latest


    steps:
      - uses: actions/checkout@v3
      - uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: '${{ secrets.AWS_ACCESS_KEY_ID }}'
          aws-secret-access-key: '${{ secrets.AWS_SECRET_ACCESS_KEY }}'
          aws-region: 'eu-west-1'

        # Pasul 1: Obține IP-ul GitHub Actions
      - name: Get GitHub Actions IP
        id: get_ip
        run: |
          ACTIONS_IP=$(curl -s https://checkip.amazonaws.com)
          echo "GitHub Actions IP: $ACTIONS_IP"
          echo "::set-output name=ip::$ACTIONS_IP"

      # Pasul 2: Adaugă IP-ul GitHub Actions în Security Group pentru acces SSH
      - name: Add GitHub Actions IP to Security Group
        run: |
          SG_ID="sg-008e2201608e83f75"  # Înlocuiește cu ID-ul Security Group-ului tău
          IP_ADDRESS="${{ steps.get_ip.outputs.ip }}"
          aws ec2 authorize-security-group-ingress --region eu-west-1 --group-id $SG_ID --protocol tcp --port 22 --cidr $IP_ADDRESS/32
          echo "IP-ul $IP_ADDRESS a fost adăugat în Security Group $SG_ID pentru acces SSH."

      # Pașii de Terraform 
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false

      - name: Terraform Init
        run: |
          terraform init
          
      - name: Terraform Apply 
        run: |
          terraform apply -auto-approve

      - name: Save instance IPs
        run: |
          INSTANCE_IPS=$(terraform output -json instance_ips)
          echo "DEBUG: $INSTANCE_IPS"
          echo "$INSTANCE_IPS" | jq -r '.[]' > ansible/instance-ips.txt

      - name: Debug file creation
        run: |
          echo "Checking if ansible directory exists"
          ls -l ansible
          echo "Saving instance IPs to file"
          INSTANCE_IPS=$(terraform output -json instance_ips)
          echo "$INSTANCE_IPS" | jq -r '.[]' > ansible/instance-ips.txt
          echo "Content of ansible/instance-ips.txt:"
          cat ansible/instance-ips.txt

      - name: Save Terraform output
        run: terraform output -json > terraform-outputs.json

      - name: Upload Terraform outputs as artifact
        uses: actions/upload-artifact@v4
        with:
          name: terraform-outputs
          path: terraform-outputs.json

            #- name: Checkout repo
            #uses: actions/checkout@v4

            #- name: Download Terraform outputs
            #uses: actions/download-artifact@v4
            #with:
            #name: terraform-outputs
            #path: .

            #- name: Check if Terraform output changed
            #id: check_changes
            #run: |
            #echo "Checking if Terraform output has changed"
          # Compară fișierul Terraform outputs cu ultima versiune salvată
          #if [[ ! -f terraform-outputs.json ]] || ! cmp -s terraform-outputs.json terraform-outputs-previous.json; then
          # echo "Terraform output has changed, proceeding with Ansible"
          # echo "true" >> terraform-change.txt
          #else
          # echo "No changes detected in Terraform output, skipping Ansible"
          # echo "false" >> terraform-change.txt
          # fi

      - name: Generate Inventory File
        #if: steps.check_changes.outputs.terraform-change == 'true'
        run: |
          echo "[servers]" > ansible/inventory.ini
          while IFS= read -r ip; do
            echo "$ip ansible_user=ubuntu ansible_ssh_private_key_file=./app-ssh-key.pem" >> ansible/inventory.ini
          done < ansible/instance-ips.txt

      - name: Set Permissions for SSH Key
        #if: steps.check_changes.outputs.terraform-change == 'true'
        run: echo "${{ secrets.SSH_PRIVATE_KEY }}" > app-ssh-key.pem && chmod 600 app-ssh-key.pem

      - name: Install Ansible
        #if: steps.check_changes.outputs.terraform-change == 'true'
        run: sudo apt update && sudo apt install -y ansible

      - name: Run Ansible Playbook
        ##if: steps.check_changes.outputs.terraform-change == 'true'
        run: ansible-playbook -i ansible/inventory.ini ansible/playbook.yaml -v

